/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query Versions {\n    pokemon_v2_versiongroup(\n      where: {\n        pokemon_v2_pokedexversiongroups_aggregate: {\n          count: { predicate: { _eq: 1 } }\n        }\n      }\n    ) {\n      generation_id\n      name\n      id\n      pokemon_v2_pokedexversiongroups {\n        pokedex_id\n        pokemon_v2_pokedex {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.VersionsDocument,
    "\n  query Pokemon($pokemonId: Int!, $generationId: Int!, $versionGroupId: Int!) {\n    pokemon_v2_pokemonspeciesflavortext(\n      where: {\n        pokemon_v2_version: { version_group_id: { _eq: $versionGroupId } }\n        pokemon_species_id: { _eq: $pokemonId }\n      }\n    ) {\n      pokemon_v2_version {\n        version_group_id\n        name\n      }\n      flavor_text\n    }\n    pokemon_v2_pokemon(where: { id: { _eq: $pokemonId } }) {\n      name\n      id\n      height\n      weight\n      pokemon_species_id\n      pokemon_v2_pokemontypes(\n        where: { pokemon_v2_type: { generation_id: { _eq: $generationId } } }\n      ) {\n        pokemon_v2_type {\n          name\n        }\n        type_id\n      }\n      pokemon_v2_pokemonmoves(\n        where: {\n          version_group_id: { _eq: $versionGroupId }\n          pokemon_v2_move: { generation_id: { _eq: $generationId } }\n          pokemon_v2_movelearnmethod: { name: { _eq: \"level-up\" } }\n        }\n        order_by: { level: asc }\n      ) {\n        id\n        level\n        pokemon_v2_move {\n          accuracy\n          name\n          power\n          pp\n          priority\n          pokemon_v2_moveeffect {\n            pokemon_v2_moveeffecteffecttexts(\n              where: { language_id: { _eq: 9 } }\n            ) {\n              effect\n              short_effect\n            }\n          }\n          pokemon_v2_moveflavortexts(\n            where: {\n              language_id: { _eq: 9 }\n              version_group_id: { _eq: $versionGroupId }\n            }\n          ) {\n            flavor_text\n            version_group_id\n          }\n          pokemon_v2_movenames(where: { language_id: { _eq: 9 } }) {\n            name\n          }\n          pokemon_v2_type {\n            name\n            id\n          }\n          pokemon_v2_movedamageclass {\n            name\n            id\n          }\n        }\n        pokemon_v2_movelearnmethod {\n          name\n        }\n      }\n      pokemon_v2_pokemonstats {\n        pokemon_v2_stat {\n          name\n        }\n        effort\n        base_stat\n      }\n      pokemon_v2_pokemonsprites {\n        sprites\n      }\n      pokemon_v2_pokemonspecy {\n        pokemon_v2_evolutionchain {\n          pokemon_v2_pokemonspecies(\n            where: { generation_id: { _eq: $generationId } }\n          ) {\n            name\n            id\n            order\n            pokemon_v2_pokemons(distinct_on: pokemon_species_id) {\n              id\n              pokemon_v2_pokemonsprites {\n                sprites\n              }\n              pokemon_species_id\n            }\n          }\n        }\n        pokemon_v2_pokemonspeciesdescriptions(\n          where: { language_id: { _eq: 9 } }\n        ) {\n          description\n        }\n      }\n    }\n  }\n": types.PokemonDocument,
    "\n  query PokemonList($pokedexId: Int!) {\n    pokemon_v2_pokemonspecies(\n      where: {\n        pokemon_v2_pokemondexnumbers: { pokedex_id: { _eq: $pokedexId } }\n      }\n    ) {\n      name\n      id\n      pokemon_v2_pokemondexnumbers(\n        where: { pokemon_v2_pokedex: { id: { _eq: $pokedexId } } }\n      ) {\n        pokedex_number\n      }\n      pokemon_v2_pokemons {\n        name\n        pokemon_v2_pokemonsprites {\n          sprites\n        }\n      }\n    }\n  }\n": types.PokemonListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Versions {\n    pokemon_v2_versiongroup(\n      where: {\n        pokemon_v2_pokedexversiongroups_aggregate: {\n          count: { predicate: { _eq: 1 } }\n        }\n      }\n    ) {\n      generation_id\n      name\n      id\n      pokemon_v2_pokedexversiongroups {\n        pokedex_id\n        pokemon_v2_pokedex {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Versions {\n    pokemon_v2_versiongroup(\n      where: {\n        pokemon_v2_pokedexversiongroups_aggregate: {\n          count: { predicate: { _eq: 1 } }\n        }\n      }\n    ) {\n      generation_id\n      name\n      id\n      pokemon_v2_pokedexversiongroups {\n        pokedex_id\n        pokemon_v2_pokedex {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Pokemon($pokemonId: Int!, $generationId: Int!, $versionGroupId: Int!) {\n    pokemon_v2_pokemonspeciesflavortext(\n      where: {\n        pokemon_v2_version: { version_group_id: { _eq: $versionGroupId } }\n        pokemon_species_id: { _eq: $pokemonId }\n      }\n    ) {\n      pokemon_v2_version {\n        version_group_id\n        name\n      }\n      flavor_text\n    }\n    pokemon_v2_pokemon(where: { id: { _eq: $pokemonId } }) {\n      name\n      id\n      height\n      weight\n      pokemon_species_id\n      pokemon_v2_pokemontypes(\n        where: { pokemon_v2_type: { generation_id: { _eq: $generationId } } }\n      ) {\n        pokemon_v2_type {\n          name\n        }\n        type_id\n      }\n      pokemon_v2_pokemonmoves(\n        where: {\n          version_group_id: { _eq: $versionGroupId }\n          pokemon_v2_move: { generation_id: { _eq: $generationId } }\n          pokemon_v2_movelearnmethod: { name: { _eq: \"level-up\" } }\n        }\n        order_by: { level: asc }\n      ) {\n        id\n        level\n        pokemon_v2_move {\n          accuracy\n          name\n          power\n          pp\n          priority\n          pokemon_v2_moveeffect {\n            pokemon_v2_moveeffecteffecttexts(\n              where: { language_id: { _eq: 9 } }\n            ) {\n              effect\n              short_effect\n            }\n          }\n          pokemon_v2_moveflavortexts(\n            where: {\n              language_id: { _eq: 9 }\n              version_group_id: { _eq: $versionGroupId }\n            }\n          ) {\n            flavor_text\n            version_group_id\n          }\n          pokemon_v2_movenames(where: { language_id: { _eq: 9 } }) {\n            name\n          }\n          pokemon_v2_type {\n            name\n            id\n          }\n          pokemon_v2_movedamageclass {\n            name\n            id\n          }\n        }\n        pokemon_v2_movelearnmethod {\n          name\n        }\n      }\n      pokemon_v2_pokemonstats {\n        pokemon_v2_stat {\n          name\n        }\n        effort\n        base_stat\n      }\n      pokemon_v2_pokemonsprites {\n        sprites\n      }\n      pokemon_v2_pokemonspecy {\n        pokemon_v2_evolutionchain {\n          pokemon_v2_pokemonspecies(\n            where: { generation_id: { _eq: $generationId } }\n          ) {\n            name\n            id\n            order\n            pokemon_v2_pokemons(distinct_on: pokemon_species_id) {\n              id\n              pokemon_v2_pokemonsprites {\n                sprites\n              }\n              pokemon_species_id\n            }\n          }\n        }\n        pokemon_v2_pokemonspeciesdescriptions(\n          where: { language_id: { _eq: 9 } }\n        ) {\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Pokemon($pokemonId: Int!, $generationId: Int!, $versionGroupId: Int!) {\n    pokemon_v2_pokemonspeciesflavortext(\n      where: {\n        pokemon_v2_version: { version_group_id: { _eq: $versionGroupId } }\n        pokemon_species_id: { _eq: $pokemonId }\n      }\n    ) {\n      pokemon_v2_version {\n        version_group_id\n        name\n      }\n      flavor_text\n    }\n    pokemon_v2_pokemon(where: { id: { _eq: $pokemonId } }) {\n      name\n      id\n      height\n      weight\n      pokemon_species_id\n      pokemon_v2_pokemontypes(\n        where: { pokemon_v2_type: { generation_id: { _eq: $generationId } } }\n      ) {\n        pokemon_v2_type {\n          name\n        }\n        type_id\n      }\n      pokemon_v2_pokemonmoves(\n        where: {\n          version_group_id: { _eq: $versionGroupId }\n          pokemon_v2_move: { generation_id: { _eq: $generationId } }\n          pokemon_v2_movelearnmethod: { name: { _eq: \"level-up\" } }\n        }\n        order_by: { level: asc }\n      ) {\n        id\n        level\n        pokemon_v2_move {\n          accuracy\n          name\n          power\n          pp\n          priority\n          pokemon_v2_moveeffect {\n            pokemon_v2_moveeffecteffecttexts(\n              where: { language_id: { _eq: 9 } }\n            ) {\n              effect\n              short_effect\n            }\n          }\n          pokemon_v2_moveflavortexts(\n            where: {\n              language_id: { _eq: 9 }\n              version_group_id: { _eq: $versionGroupId }\n            }\n          ) {\n            flavor_text\n            version_group_id\n          }\n          pokemon_v2_movenames(where: { language_id: { _eq: 9 } }) {\n            name\n          }\n          pokemon_v2_type {\n            name\n            id\n          }\n          pokemon_v2_movedamageclass {\n            name\n            id\n          }\n        }\n        pokemon_v2_movelearnmethod {\n          name\n        }\n      }\n      pokemon_v2_pokemonstats {\n        pokemon_v2_stat {\n          name\n        }\n        effort\n        base_stat\n      }\n      pokemon_v2_pokemonsprites {\n        sprites\n      }\n      pokemon_v2_pokemonspecy {\n        pokemon_v2_evolutionchain {\n          pokemon_v2_pokemonspecies(\n            where: { generation_id: { _eq: $generationId } }\n          ) {\n            name\n            id\n            order\n            pokemon_v2_pokemons(distinct_on: pokemon_species_id) {\n              id\n              pokemon_v2_pokemonsprites {\n                sprites\n              }\n              pokemon_species_id\n            }\n          }\n        }\n        pokemon_v2_pokemonspeciesdescriptions(\n          where: { language_id: { _eq: 9 } }\n        ) {\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PokemonList($pokedexId: Int!) {\n    pokemon_v2_pokemonspecies(\n      where: {\n        pokemon_v2_pokemondexnumbers: { pokedex_id: { _eq: $pokedexId } }\n      }\n    ) {\n      name\n      id\n      pokemon_v2_pokemondexnumbers(\n        where: { pokemon_v2_pokedex: { id: { _eq: $pokedexId } } }\n      ) {\n        pokedex_number\n      }\n      pokemon_v2_pokemons {\n        name\n        pokemon_v2_pokemonsprites {\n          sprites\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PokemonList($pokedexId: Int!) {\n    pokemon_v2_pokemonspecies(\n      where: {\n        pokemon_v2_pokemondexnumbers: { pokedex_id: { _eq: $pokedexId } }\n      }\n    ) {\n      name\n      id\n      pokemon_v2_pokemondexnumbers(\n        where: { pokemon_v2_pokedex: { id: { _eq: $pokedexId } } }\n      ) {\n        pokedex_number\n      }\n      pokemon_v2_pokemons {\n        name\n        pokemon_v2_pokemonsprites {\n          sprites\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;